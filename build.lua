#!/usr/bin/env luajit

local function exec(...)
    local t = table.concat({...}, " ")
    local a = assert(io.popen(t))
    local t = a:read("*a")
    a:close()

    return t
end

local function check_exec(name)
    local a = exec("whereis " .. name)
    if #a == (#name+2) then
        error("program '"..name.."' wasnt found in $PATH! go get it checked and installed :/\n", 2)
    end
end

local function opt_exec(name)
    local a = exec("whereis " .. name)
    return #a ~= (#name+2)
end

if package.config:sub(1,1) ~= "/" then
    print("note!! this program wasnt made with windows on mind, so expect it to break.\n")
end

check_exec("find")

local commit = "unknown"
if opt_exec("git") then
    commit = exec("git rev-parse --short HEAD")
    commit = commit:gsub("%s", "")
end

local packed_stuff = false

local function pack()
    print("\n!! packing a buncha files !!")

    if packed_stuff then
        print("oo! stuff is already packed!!")
        return
    end
    packed_stuff = true

    local outf = assert(io.open("src/static.h", "w+"))

    outf:write("// AUTOGENERATED BY ./BUILD.LUA\n\n")
    local i = 0

    local j = ""
    for n in io.popen("find package/* -type f"):lines() do
        local short = n:sub(9)
        local fx = "f"..i

        local content = {}
        local f = assert(io.open(n))
        local y = f:read("a")
        for x=1, #y do
            content[x] = string.byte(y:sub(x, x))
        end
        f:close()

        table.insert(content, 0)

        local arr = table.concat(content, ",")

        outf:write("static unsigned char ".. fx .."_[] = {"..arr.."};\n")

        j = j .. "\t{ \""..short.."\", ".. fx .."_, "..(#content-1).." },\n" 

        i = i + 1
        print("> packed '"..short.."'")
    end

    outf:write("static struct { char *filename; unsigned char *data; unsigned int size; } fs_table[] = {\n")

    outf:write(j)

    outf:write("\t{ 0, 0, 0 }\n};")

    outf:close()
end

local default_toolchain = {
    name = "unknown",
    
    cc = "gcc",
    flags = "-lm -lSDL2",
    strip = "strip",
    upx = "upx",
    post = false,
    extension = "",

    should_strip = true,
    should_compress = true,

    debug = false
}

local function compile(setup)
    if not setup.debug then
        pack()
    end

    setmetatable(setup, { __index = default_toolchain })

    local t = setup.debug and "debug" or "release"
    print("\nbuilding using the '"..setup.name.."' ("..t..") target")

    check_exec(setup.cc)

    if opt_exec("ccache") and not os.getenv("NO_CCACHE") then
        print("! found ccache and env var NO_CCACHE is undefined")
        setup.cc = "ccache " .. setup.cc
    end

    local k = "-Ilib/ -Wstringop-overflow=0 -D_POSIX_C_SOURCE=200809L --std=c99 -DTHING_COMMIT='\""..commit.."\"'"
    if setup.debug then
        k = k .. " -ggdb -DTFX_DEBUG -DTRASH_DEBUG -DFS_NAIVE_FILES"
        print("IGNORING target.should_strip AND target.should_compress")
    else
        k = k .. " -Ofast"
    end

    local dir = "out/"..setup.name.."/"
    os.execute("mkdir -p " .. dir)
    for n in io.popen("find src/*.c lib/*.c -type f"):lines() do
        local o_name = dir..n:sub(1, #n-2):gsub("/", ".")..".o"
        local c = ("%s %s -c %s -o %s"):format(setup.cc, k, n, o_name)
        print("> compiling '"..n.."'\n"..c.."\n")
        exec(c)
    end

    local output = "thing" .. setup.extension

    local optimizations = "-fdata-sections -ffunction-sections -Wl,--gc-sections"

    io.stdout:write("> linking")
    exec(setup.cc, optimizations, dir.."*.o", setup.flags, "-o", output)
    io.stdout:write(" ... ok!\n")

    local function attempt(what)
        io.stdout:write("> trying to use " .. what .. " on output")
        if setup.debug then
            return io.stdout:write(" ... debug mode, skipping\n")
        end

        if not opt_exec(what) then
            return io.stdout:write("... not found!\n")
        end

        exec(what, output)
    
        io.stdout:write(" ... ok!\n")
    end

    attempt(setup.strip)
    attempt(setup.upx)

    if setup.post then
        print("> post")
        print(setup.post)
        os.execute(setup.post:gsub("\n", ";\n"))
    end

    print("!! done !!")
end

local function release_linux(dbg)
    compile {
        name = "x86_64-linux-host",
    
        cc = os.getenv("CC") or "gcc",
        strip = "strip",
        flags = "-lm -lSDL2 -lc -ldl",

        debug = dbg,

        post = [[
            cp thing out/socks-lin64
        ]]
    }
end

local function release_windows(dbg)
    check_exec("zip")
    
    compile {
        name = "x86_64-windows-gnu",

        cc = "x86_64-w64-mingw32-gcc",
        flags = "-lSDL2 -lws2_32",
        strip = "x86_64-w64-mingw32-strip",
        extension = ".exe",
        
        debug = dbg,

        post = [[
            cp thing.exe out/socks.exe
            cp out/
            cd out/
            zip socks-win64.zip socks.exe SDL2.dll
        ]]
    }
end

local function release(dbg)
    release_linux(dbg)
    release_windows(dbg)
end

local function debug()
    release(true)
end

local function debug_linux()
    release_linux(true)
end

local function debug_windows()
    release_windows(true)
end

-- I am sorry, windows users
local function run()
    print("\n!! fast run mode!!! aeeee !!")

    check_exec("tcc")

    local a = "-Ilib/ -lSDL2 -lm -pthread"
    local k = "-DTRASH_DEBUG -DFS_NAIVE_FILES -DSDL_DISABLE_IMMINTRIN_H -DCUTE_SOUND_SCALAR_MODE"

    os.execute("tcc "..a.." "..k.." src/*.c lib/*.c -o thing")
    print("tcc "..a.." "..k.." src/*.c lib/*.c -o thing")
    os.execute("./thing")

    print("all is okay! :)")
end

local function cleanup()
    print("\n!! cleaning up this ugly garbage !!")

    os.execute("rm -f src/static.h")
    os.execute("rm -f thing thing.exe")
    os.execute("rm -rf out")
end

print("hey i build stuff hello")
os.execute("mkdir -p out")


local options = {
    cleanup = cleanup,
    pack = pack,
    run = run,

    release = release,
    release_linux = release_linux,
    release_windows = release_windows,

    debug = debug,
    debug_linux = debug_linux,
    debug_windows = debug_windows,
}

options.help = function ()
    local g = {}
    for name in pairs(options) do
        table.insert(g, name)
    end

    print("\nthis is what i can do:")
    print("\t" .. table.concat(g, "\n\t"))
    os.exit(0)
end

local opt = arg[1]
if not opt then
    options.help()
end

local f = options[opt]
if not f then
    print("darn, idk what '"..opt.."' is")
    options.help()
end

f()